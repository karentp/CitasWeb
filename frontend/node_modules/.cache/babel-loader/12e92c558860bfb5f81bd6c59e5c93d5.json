{"ast":null,"code":"import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { IconButton, Grid, makeStyles, Card, Button, CircularProgress, Popover, ThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport { ArrowLeft, ArrowRight } from \"@material-ui/icons\";\n\nconst CalendarTemplate = _ref => {\n  let {\n    availability,\n    setAvailability,\n    primaryColor = \"#DF1B1B\",\n    secondaryColor = \"#47b2a2\",\n    fontFamily = \"Roboto\",\n    fontSize = 12,\n    primaryFontColor = \"#222222\",\n    startTime = \"8:00\",\n    endTime = \"20:00\"\n  } = _ref;\n  const theme = createMuiTheme({\n    typography: {\n      fontFamily: `${fontFamily}`,\n      fontSize: fontSize\n    },\n    palette: {\n      primary: {\n        main: primaryColor\n      },\n      secondary: {\n        main: secondaryColor\n      },\n      text: {\n        primary: primaryFontColor\n      }\n    }\n  });\n  const useStyles = makeStyles(theme => ({\n    calendar: {\n      fontFamily: theme.typography.fontFamily\n    },\n    calendarText: {\n      margin: 0,\n      width: 25,\n      height: 25,\n      textAlign: \"center\"\n    },\n    button: {\n      minWidth: 200,\n      margin: 10,\n      fontFamily: theme.typography.fontFamily\n    },\n    buttonNoMargin: {\n      minWidth: 200,\n      fontFamily: theme.typography.fontFamily\n    },\n    popover: {\n      pointerEvents: \"none\",\n      fontFamily: theme.typography.fontFamily\n    },\n    paper: {\n      padding: theme.spacing(1)\n    }\n  }));\n\n  const useMonths = year => ({\n    1: {\n      lastDay: 31,\n      month: \"January\",\n      firstDay: moment(`01/01/${year}`)\n    },\n    2: {\n      lastDay: year % 4 === 0 ? 29 : 28,\n      month: \"February\",\n      firstDay: moment(`02/01/${year}`)\n    },\n    3: {\n      lastDay: 31,\n      month: \"March\",\n      firstDay: moment(`03/01/${year}`)\n    },\n    4: {\n      lastDay: 30,\n      month: \"April\",\n      firstDay: moment(`04/01/${year}`)\n    },\n    5: {\n      lastDay: 31,\n      month: \"May\",\n      firstDay: moment(`05/01/${year}`)\n    },\n    6: {\n      lastDay: 30,\n      month: \"June\",\n      firstDay: moment(`06/01/${year}`)\n    },\n    7: {\n      lastDay: 31,\n      month: \"July\",\n      firstDay: moment(`07/01/${year}`)\n    },\n    8: {\n      lastDay: 31,\n      month: \"August\",\n      firstDay: moment(`08/01/${year}`)\n    },\n    9: {\n      lastDay: 30,\n      month: \"September\",\n      firstDay: moment(`09/01/${year}`)\n    },\n    10: {\n      lastDay: 31,\n      month: \"October\",\n      firstDay: moment(`10/01/${year}`)\n    },\n    11: {\n      lastDay: 30,\n      month: \"November\",\n      firstDay: moment(`11/01/${year}`)\n    },\n    12: {\n      lastDay: 31,\n      month: \"December\",\n      firstDay: moment(`12/01/${year}`)\n    }\n  });\n\n  const getDefaultTimes = () => {\n    const times = [{\n      time: \"0:00\",\n      available: false\n    }, {\n      time: \"1:00\",\n      available: false\n    }, {\n      time: \"2:00\",\n      available: false\n    }, {\n      time: \"3:00\",\n      available: false\n    }, {\n      time: \"4:00\",\n      available: false\n    }, {\n      time: \"5:00\",\n      available: false\n    }, {\n      time: \"6:00\",\n      available: false\n    }, {\n      time: \"7:00\",\n      available: false\n    }, {\n      time: \"8:00\",\n      available: false\n    }, {\n      time: \"9:00\",\n      available: false\n    }, {\n      time: \"10:00\",\n      available: false\n    }, {\n      time: \"11:00\",\n      available: false\n    }, {\n      time: \"12:00\",\n      available: false\n    }, {\n      time: \"13:00\",\n      available: false\n    }, {\n      time: \"14:00\",\n      available: false\n    }, {\n      time: \"15:00\",\n      available: false\n    }, {\n      time: \"16:00\",\n      available: false\n    }, {\n      time: \"17:00\",\n      available: false\n    }, {\n      time: \"18:00\",\n      available: false\n    }, {\n      time: \"19:00\",\n      available: false\n    }, {\n      time: \"20:00\",\n      available: false\n    }, {\n      time: \"21:00\",\n      available: false\n    }, {\n      time: \"22:00\",\n      available: false\n    }, {\n      time: \"23:00\",\n      available: false\n    }, {\n      time: \"0:00\",\n      available: false\n    }];\n    let include = false;\n    return times.filter(time => {\n      if (time.time === startTime) {\n        include = true;\n      }\n\n      if (time.time === endTime) {\n        include = false;\n        return true;\n      }\n\n      return include;\n    });\n  };\n\n  function TimeButton(_ref2) {\n    let {\n      className,\n      start,\n      end,\n      available,\n      handleClick\n    } = _ref2;\n    return /*#__PURE__*/React.createElement(Button, {\n      onClick: handleClick,\n      color: available ? \"primary\" : \"default\",\n      className: className,\n      variant: available ? \"contained\" : \"outlined\"\n    }, start, \" - \", end);\n  }\n\n  function getDaysArray() {\n    return [[\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]];\n  }\n\n  const convertAvailabilityFromDatabase = availability => {\n    const output = {};\n\n    for (let range of availability) {\n      let start = moment(range.start);\n      let startTime = `${start.format(\"H\")}:${start.format(\"mm\")}`;\n      let end = moment(range.end);\n      let endTime = `${end.format(\"H\")}:${end.format(\"mm\")}`;\n      let year = Number(start.format(\"YYYY\"));\n      let month = start.format(\"MMMM\");\n      let day = Number(start.format(\"D\"));\n      fillOutputWithDefaultTimes(output, year, month, day);\n      let i = 0;\n\n      while (i < output[year][month][day].length && output[year][month][day][i].time !== startTime) i++;\n\n      while (i < output[year][month][day].length && output[year][month][day][i].time !== endTime) {\n        output[year][month][day][i].available = true;\n        i++;\n      }\n    }\n\n    return output;\n  };\n\n  const convertAvailabilityForDatabase = availability => {\n    const output = [];\n\n    for (let year in availability) {\n      for (let month in availability[year]) {\n        for (let day in availability[year][month]) {\n          let activeDay = availability[year][month][day];\n          addActiveDayToOutput(activeDay, output, month, day, year);\n        }\n      }\n    }\n\n    return output;\n  };\n\n  const combineTimeArrays = (a, b) => {\n    for (let i = 0; i < a.length; i++) {\n      a[i].available = a[i].available || b[i].available;\n    }\n\n    return a;\n  };\n\n  function addActiveDayToOutput(activeDay, output, month, day, year) {\n    let activeRangeStart = null;\n\n    for (let time of activeDay) {\n      if (time.available && !activeRangeStart) activeRangeStart = time.time;else if (!time.available && activeRangeStart) {\n        output.push({\n          start: new Date(`${month} ${day} ${year} ${activeRangeStart}`),\n          end: new Date(`${month} ${day} ${year} ${time.time}`)\n        });\n        activeRangeStart = null;\n      }\n    }\n  }\n\n  function fillOutputWithDefaultTimes(output, year, month, day) {\n    if (output.hasOwnProperty(year)) {\n      if (output[year].hasOwnProperty(month)) {\n        if (!output[year][month].hasOwnProperty(day)) {\n          output[year][month][day] = getDefaultTimes();\n        }\n      } else {\n        output[year][month] = {\n          [day]: getDefaultTimes()\n        };\n      }\n    } else {\n      output[year] = {\n        [month]: {\n          [day]: getDefaultTimes()\n        }\n      };\n    }\n  }\n\n  function makeQuickAvailability(availability) {\n    const output = {};\n\n    for (let range of availability) {\n      if (new Date(range.start) > new Date()) {\n        let day = moment(range.start).format(\"MMMM D, YYYY\");\n        let time = `${moment(range.start).format(\"H:mm\")} - ${moment(range.end).format(\"H:mm\")}`;\n\n        if (output[day]) {\n          output[day].push(time);\n        } else {\n          output[day] = [time];\n        }\n      }\n    }\n\n    return output;\n  }\n\n  return function Calendar() {\n    const classes = useStyles();\n    const today = moment();\n    const [availabilityState, setAvailabilityState] = useState(convertAvailabilityFromDatabase(availability));\n    const [quickAvailability, setQuickAvailability] = useState(makeQuickAvailability(availability));\n    const [activeDay, setActiveDay] = useState(null);\n    const [year, setYear] = useState(Number(today.format(\"YYYY\")));\n    const [monthNumber, setMonthNumber] = useState(Number(today.format(\"M\")));\n    const [settingMultiple, setSettingMultiple] = useState(false);\n    const months = useMonths(year);\n    const {\n      firstDay,\n      month,\n      lastDay\n    } = months[monthNumber];\n    let dayOfWeek = Number(moment(firstDay).format(\"d\"));\n    const days = getDaysArray();\n    const [times, setTimes] = useState(getDefaultTimes());\n    const [saving, setSaving] = useState(false);\n    let week = 0;\n    let dayOfMonth = 1;\n\n    while (week < 6 && dayOfMonth <= lastDay) {\n      days[week][dayOfWeek] = dayOfMonth;\n      dayOfMonth++;\n      dayOfWeek++;\n\n      if (dayOfWeek === 7) {\n        week++;\n        dayOfWeek = 0;\n      }\n    }\n\n    const createArrowHandler = delta => () => {\n      let newMonth = monthNumber + delta;\n\n      if (newMonth > 12) {\n        setYear(year + 1);\n        newMonth = 1;\n      } else if (newMonth < 1) {\n        setYear(year - 1);\n        newMonth = 12;\n      }\n\n      setActiveDay(null);\n      setTimes(getDefaultTimes());\n      setMonthNumber(newMonth);\n    };\n\n    const createTimeHandler = i => () => {\n      const newTimes = [...times];\n      newTimes[i].available = !newTimes[i].available;\n\n      if (activeDay) {\n        addTimeToDay(newTimes);\n      }\n\n      setTimes(newTimes);\n    };\n\n    const createDayHandler = day => () => {\n      if (settingMultiple) {\n        addTimesToDay(day);\n      } else {\n        examineAvailabilityForDay(day);\n      }\n    };\n\n    const handleSetMultiple = () => {\n      setActiveDay(null);\n      setSettingMultiple(!settingMultiple);\n    };\n\n    const handleSaveAvailability = () => {\n      const data = convertAvailabilityForDatabase(availabilityState);\n      setSaving(true);\n      setAvailability(data);\n    };\n\n    const handleJumpToCurrent = () => {\n      setYear(Number(today.format(\"YYYY\")));\n      setMonthNumber(Number(today.format(\"M\")));\n      setActiveDay(null);\n      setTimes(getDefaultTimes());\n    };\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [popoverContent, setPopoverContent] = useState(null);\n\n    const handleOpenPopover = date => {\n      return e => {\n        if (quickAvailability[date]) {\n          setPopoverContent(quickAvailability[date].map(time => /*#__PURE__*/React.createElement(\"p\", null, time)));\n          setAnchorEl(e.target);\n        }\n      };\n    };\n\n    const handleClosePopover = () => {\n      setAnchorEl(null);\n      setPopoverContent(null);\n    };\n\n    return /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: classes.calendar,\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\"\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      alignItems: \"center\",\n      justify: \"center\"\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      disabled: year === Number(today.format(\"YYYY\")) && month === today.format(\"MMMM\"),\n      onClick: createArrowHandler(-1)\n    }, /*#__PURE__*/React.createElement(ArrowLeft, null))), /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: {\n        padding: 10,\n        margin: 10\n      },\n      variant: \"outlined\"\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, month, \" \", year), days.map((week, i) => /*#__PURE__*/React.createElement(Grid, {\n      key: i,\n      item: true\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\"\n    }, week.map((day, i) => /*#__PURE__*/React.createElement(Grid, {\n      key: year + month + i,\n      item: true\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: createDayHandler(day),\n      color: activeDay === day ? \"primary\" : availabilityState[year] && availabilityState[year][month] && availabilityState[year][month][day] && availabilityState[year][month][day].filter(x => x.available).length > 0 ? \"secondary\" : \"default\",\n      disabled: !day || year === Number(today.format(\"YYYY\")) && month === today.format(\"MMMM\") && day < Number(today.format(\"D\")),\n      size: \"medium\",\n      onMouseEnter: handleOpenPopover(`${month} ${day}, ${year}`),\n      onMouseLeave: handleClosePopover\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.calendarText\n    }, day))))))), /*#__PURE__*/React.createElement(Popover, {\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n      },\n      className: classes.popover,\n      classes: {\n        paper: classes.paper\n      },\n      anchorEl: anchorEl,\n      open: !!anchorEl\n    }, popoverContent), /*#__PURE__*/React.createElement(Button, {\n      disabled: year === Number(today.format(\"YYYY\")) && month === today.format(\"MMMM\"),\n      onClick: handleJumpToCurrent,\n      className: classes.buttonNoMargin\n    }, \"Jump to Current Month\")))), /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: createArrowHandler(1)\n    }, /*#__PURE__*/React.createElement(ArrowRight, null))), /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      wrap: \"wrap\"\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\",\n      wrap: \"wrap\"\n    }, times.map((time, i) => i < times.length - 7 && /*#__PURE__*/React.createElement(TimeButton, {\n      key: time.time,\n      className: classes.button,\n      start: time.time,\n      end: times[i + 1].time,\n      handleClick: createTimeHandler(i),\n      available: time.available\n    })))), /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\",\n      wrap: \"wrap\"\n    }, times.map((time, i) => i < times.length - 1 && i > 5 && /*#__PURE__*/React.createElement(TimeButton, {\n      key: time.time,\n      className: classes.button,\n      start: time.time,\n      end: times[i + 1].time,\n      handleClick: createTimeHandler(i),\n      available: time.available\n    })))))))), /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      alignItems: \"center\",\n      justify: \"center\"\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleSetMultiple,\n      className: classes.button\n    }, settingMultiple ? \"Done\" : \"Add Selected Times to Multiple Days\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true\n    }, saving ? /*#__PURE__*/React.createElement(CircularProgress, null) : /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleSaveAvailability,\n      className: classes.button\n    }, \"Save Availability\"))))));\n\n    function addTimeToDay(newTimes) {\n      const newAvail = availabilityState;\n\n      if (newAvail.hasOwnProperty(year)) {\n        if (newAvail[year].hasOwnProperty(month)) {\n          newAvail[year][month][activeDay] = newTimes;\n        } else {\n          newAvail[year][month] = {\n            [activeDay]: newTimes\n          };\n        }\n      } else {\n        newAvail[year] = {\n          [month]: {\n            [activeDay]: newTimes\n          }\n        };\n      }\n\n      setAvailabilityState(newAvail);\n      setQuickAvailability(makeQuickAvailability(convertAvailabilityForDatabase(newAvail)));\n    }\n\n    function examineAvailabilityForDay(day) {\n      if (availabilityState[year] && availabilityState[year][month] && availabilityState[year][month][day]) {\n        setTimes(availabilityState[year][month][day]);\n      } else {\n        setTimes(getDefaultTimes());\n      }\n\n      setActiveDay(day);\n    }\n\n    function addTimesToDay(day) {\n      const newAvail = { ...availabilityState\n      };\n\n      if (newAvail[year]) {\n        if (newAvail[year][month]) {\n          if (newAvail[year][month][day]) {\n            newAvail[year][month][day] = combineTimeArrays(newAvail[year][month][day], times);\n          } else {\n            newAvail[year][month][day] = times;\n          }\n        } else {\n          newAvail[year][month] = {\n            [day]: times\n          };\n        }\n      } else {\n        newAvail[year] = {\n          [month]: {\n            [day]: times\n          }\n        };\n      }\n\n      setAvailabilityState(newAvail);\n      setQuickAvailability(makeQuickAvailability(convertAvailabilityForDatabase(newAvail)));\n    }\n  };\n};\n\nexport default CalendarTemplate;","map":null,"metadata":{},"sourceType":"module"}