{"ast":null,"code":"import React from 'react';\nexport const getBase64 = file => {\n  return new Promise(resolve => {\n    let fileInfo;\n    let baseURL = \"\"; // Make new FileReader\n\n    let reader = new FileReader(); // Convert the file to base64 text\n\n    reader.readAsDataURL(file); // on reader load somthing...\n\n    reader.onload = () => {\n      // Make a fileInfo Object\n      baseURL = reader.result;\n      resolve(baseURL);\n    };\n  });\n};\nexport const checkFileValidations = info => {\n  if (info.size >= 15165578) {\n    throw Error(\"LIMIT_FILE_SIZE\");\n  }\n};\nexport async function getLocalFile(url) {\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        'Content-Type': 'image/jpeg',\n        Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n      }\n    });\n    const blob = await response.blob();\n    return [URL.createObjectURL(blob), null];\n  } catch (error) {\n    console.error(`get: error occurred ${error}`);\n    return [null, error];\n  }\n}","map":{"version":3,"sources":["/Users/karentovar/Documents/SCYTO/frontend/src/services/getFileService.js"],"names":["React","getBase64","file","Promise","resolve","fileInfo","baseURL","reader","FileReader","readAsDataURL","onload","result","checkFileValidations","info","size","Error","getLocalFile","url","response","fetch","method","mode","cache","headers","Authorization","localStorage","getItem","blob","URL","createObjectURL","error","console"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAGC,IAAI,IAAI;AAC/B,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,QAAIC,QAAJ;AACA,QAAIC,OAAO,GAAG,EAAd,CAF4B,CAG5B;;AACA,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb,CAJ4B,CAM5B;;AACAD,IAAAA,MAAM,CAACE,aAAP,CAAqBP,IAArB,EAP4B,CAS5B;;AACAK,IAAAA,MAAM,CAACG,MAAP,GAAgB,MAAM;AACpB;AACAJ,MAAAA,OAAO,GAAGC,MAAM,CAACI,MAAjB;AACAP,MAAAA,OAAO,CAACE,OAAD,CAAP;AACD,KAJD;AAMD,GAhBM,CAAP;AAiBD,CAlBM;AAoBP,OAAO,MAAMM,oBAAoB,GAAGC,IAAI,IAAI;AAC1C,MAAGA,IAAI,CAACC,IAAL,IAAa,QAAhB,EAAyB;AACvB,UAAMC,KAAK,CAAC,iBAAD,CAAX;AACD;AACF,CAJM;AAMP,OAAO,eAAeC,YAAf,CAA4BC,GAA5B,EAAiC;AACtC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,MAAAA,MAAM,EAAE,KADwB;AACjB;AACfC,MAAAA,IAAI,EAAE,MAF0B;AAElB;AACdC,MAAAA,KAAK,EAAE,UAHyB;AAGb;AACnBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,YADT;AAEPC,QAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkC;AAFpD;AAJuB,KAAN,CAA5B;AASA,UAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAT,EAAnB;AACA,WAAO,CAACC,GAAG,CAACC,eAAJ,CAAoBF,IAApB,CAAD,EAA4B,IAA5B,CAAP;AACD,GAZD,CAaA,OAAOG,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAe,uBAAsBA,KAAM,EAA3C;AACA,WAAO,CAAC,IAAD,EAAOA,KAAP,CAAP;AACD;AACF","sourcesContent":["import React from 'react'\r\n\r\nexport const getBase64 = file => {\r\n  return new Promise(resolve => {\r\n    let fileInfo;\r\n    let baseURL = \"\";\r\n    // Make new FileReader\r\n    let reader = new FileReader();\r\n\r\n    // Convert the file to base64 text\r\n    reader.readAsDataURL(file);\r\n\r\n    // on reader load somthing...\r\n    reader.onload = () => {\r\n      // Make a fileInfo Object\r\n      baseURL = reader.result;\r\n      resolve(baseURL);\r\n    };\r\n\r\n  });\r\n};\r\n\r\nexport const checkFileValidations = info => {\r\n  if(info.size >= 15165578){\r\n    throw Error(\"LIMIT_FILE_SIZE\")\r\n  }\r\n}\r\n\r\nexport async function getLocalFile(url) {\r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      headers: {\r\n        'Content-Type': 'image/jpeg',\r\n        Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n      }\r\n    })\r\n    const blob = await response.blob()\r\n    return [URL.createObjectURL(blob), null];\r\n  }\r\n  catch (error) {\r\n    console.error(`get: error occurred ${error}`);\r\n    return [null, error]\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}