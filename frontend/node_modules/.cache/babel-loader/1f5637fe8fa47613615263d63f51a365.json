{"ast":null,"code":"var _jsxFileName = \"/Users/karentovar/Documents/WebCitas/frontend/src/pages/Project/Calendar.js\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { IconButton, Grid, makeStyles, Card, Button, CircularProgress, Popover, ThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport { ArrowLeft, ArrowRight } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalendarTemplate = _ref => {\n  var _s = $RefreshSig$();\n\n  let {\n    availability,\n    setAvailability,\n    primaryColor = \"#DF1B1B\",\n    secondaryColor = \"#47b2a2\",\n    fontFamily = \"Roboto\",\n    fontSize = 12,\n    primaryFontColor = \"#222222\",\n    startTime = \"8:00\",\n    endTime = \"20:00\"\n  } = _ref;\n  const theme = createMuiTheme({\n    typography: {\n      fontFamily: `${fontFamily}`,\n      fontSize: fontSize\n    },\n    palette: {\n      primary: {\n        main: primaryColor\n      },\n      secondary: {\n        main: secondaryColor\n      },\n      text: {\n        primary: primaryFontColor\n      }\n    }\n  });\n  const useStyles = makeStyles(theme => ({\n    calendar: {\n      fontFamily: theme.typography.fontFamily\n    },\n    calendarText: {\n      margin: 0,\n      width: 25,\n      height: 25,\n      textAlign: \"center\"\n    },\n    button: {\n      minWidth: 200,\n      margin: 10,\n      fontFamily: theme.typography.fontFamily\n    },\n    buttonNoMargin: {\n      minWidth: 200,\n      fontFamily: theme.typography.fontFamily\n    },\n    popover: {\n      pointerEvents: \"none\",\n      fontFamily: theme.typography.fontFamily\n    },\n    paper: {\n      padding: theme.spacing(1)\n    }\n  }));\n\n  const useMonths = year => ({\n    1: {\n      lastDay: 31,\n      month: \"January\",\n      firstDay: moment(`01/01/${year}`)\n    },\n    2: {\n      lastDay: year % 4 === 0 ? 29 : 28,\n      month: \"February\",\n      firstDay: moment(`02/01/${year}`)\n    },\n    3: {\n      lastDay: 31,\n      month: \"March\",\n      firstDay: moment(`03/01/${year}`)\n    },\n    4: {\n      lastDay: 30,\n      month: \"April\",\n      firstDay: moment(`04/01/${year}`)\n    },\n    5: {\n      lastDay: 31,\n      month: \"May\",\n      firstDay: moment(`05/01/${year}`)\n    },\n    6: {\n      lastDay: 30,\n      month: \"June\",\n      firstDay: moment(`06/01/${year}`)\n    },\n    7: {\n      lastDay: 31,\n      month: \"July\",\n      firstDay: moment(`07/01/${year}`)\n    },\n    8: {\n      lastDay: 31,\n      month: \"August\",\n      firstDay: moment(`08/01/${year}`)\n    },\n    9: {\n      lastDay: 30,\n      month: \"September\",\n      firstDay: moment(`09/01/${year}`)\n    },\n    10: {\n      lastDay: 31,\n      month: \"October\",\n      firstDay: moment(`10/01/${year}`)\n    },\n    11: {\n      lastDay: 30,\n      month: \"November\",\n      firstDay: moment(`11/01/${year}`)\n    },\n    12: {\n      lastDay: 31,\n      month: \"December\",\n      firstDay: moment(`12/01/${year}`)\n    }\n  });\n\n  const getDefaultTimes = () => {\n    const times = [{\n      time: \"0:00\",\n      available: false\n    }, {\n      time: \"1:00\",\n      available: false\n    }, {\n      time: \"2:00\",\n      available: false\n    }, {\n      time: \"3:00\",\n      available: false\n    }, {\n      time: \"4:00\",\n      available: false\n    }, {\n      time: \"5:00\",\n      available: false\n    }, {\n      time: \"6:00\",\n      available: false\n    }, {\n      time: \"7:00\",\n      available: false\n    }, {\n      time: \"8:00\",\n      available: false\n    }, {\n      time: \"9:00\",\n      available: false\n    }, {\n      time: \"10:00\",\n      available: false\n    }, {\n      time: \"11:00\",\n      available: false\n    }, {\n      time: \"12:00\",\n      available: false\n    }, {\n      time: \"13:00\",\n      available: false\n    }, {\n      time: \"14:00\",\n      available: false\n    }, {\n      time: \"15:00\",\n      available: false\n    }, {\n      time: \"16:00\",\n      available: false\n    }, {\n      time: \"17:00\",\n      available: false\n    }, {\n      time: \"18:00\",\n      available: false\n    }, {\n      time: \"19:00\",\n      available: false\n    }, {\n      time: \"20:00\",\n      available: false\n    }, {\n      time: \"21:00\",\n      available: false\n    }, {\n      time: \"22:00\",\n      available: false\n    }, {\n      time: \"23:00\",\n      available: false\n    }, {\n      time: \"0:00\",\n      available: false\n    }];\n    let include = false;\n    return times.filter(time => {\n      if (time.time === startTime) {\n        include = true;\n      }\n\n      if (time.time === endTime) {\n        include = false;\n        return true;\n      }\n\n      return include;\n    });\n  };\n\n  function TimeButton(_ref2) {\n    let {\n      className,\n      start,\n      end,\n      available,\n      handleClick\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick,\n      color: available ? \"primary\" : \"default\",\n      className: className,\n      variant: available ? \"contained\" : \"outlined\",\n      children: [start, \" - \", end]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this);\n  }\n\n  function getDaysArray() {\n    return [[\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]];\n  }\n\n  const convertAvailabilityFromDatabase = availability => {\n    const output = {};\n\n    for (let range of availability) {\n      let start = moment(range.start);\n      let startTime = `${start.format(\"H\")}:${start.format(\"mm\")}`;\n      let end = moment(range.end);\n      let endTime = `${end.format(\"H\")}:${end.format(\"mm\")}`;\n      let year = Number(start.format(\"YYYY\"));\n      let month = start.format(\"MMMM\");\n      let day = Number(start.format(\"D\"));\n      fillOutputWithDefaultTimes(output, year, month, day);\n      let i = 0;\n\n      while (i < output[year][month][day].length && output[year][month][day][i].time !== startTime) i++;\n\n      while (i < output[year][month][day].length && output[year][month][day][i].time !== endTime) {\n        output[year][month][day][i].available = true;\n        i++;\n      }\n    }\n\n    return output;\n  };\n\n  const convertAvailabilityForDatabase = availability => {\n    const output = [];\n\n    for (let year in availability) {\n      for (let month in availability[year]) {\n        for (let day in availability[year][month]) {\n          let activeDay = availability[year][month][day];\n          addActiveDayToOutput(activeDay, output, month, day, year);\n        }\n      }\n    }\n\n    return output;\n  };\n\n  const combineTimeArrays = (a, b) => {\n    for (let i = 0; i < a.length; i++) {\n      a[i].available = a[i].available || b[i].available;\n    }\n\n    return a;\n  };\n\n  function addActiveDayToOutput(activeDay, output, month, day, year) {\n    let activeRangeStart = null;\n\n    for (let time of activeDay) {\n      if (time.available && !activeRangeStart) activeRangeStart = time.time;else if (!time.available && activeRangeStart) {\n        output.push({\n          start: new Date(`${month} ${day} ${year} ${activeRangeStart}`),\n          end: new Date(`${month} ${day} ${year} ${time.time}`)\n        });\n        activeRangeStart = null;\n      }\n    }\n  }\n\n  function fillOutputWithDefaultTimes(output, year, month, day) {\n    if (output.hasOwnProperty(year)) {\n      if (output[year].hasOwnProperty(month)) {\n        if (!output[year][month].hasOwnProperty(day)) {\n          output[year][month][day] = getDefaultTimes();\n        }\n      } else {\n        output[year][month] = {\n          [day]: getDefaultTimes()\n        };\n      }\n    } else {\n      output[year] = {\n        [month]: {\n          [day]: getDefaultTimes()\n        }\n      };\n    }\n  }\n\n  function makeQuickAvailability(availability) {\n    const output = {};\n\n    for (let range of availability) {\n      if (new Date(range.start) > new Date()) {\n        let day = moment(range.start).format(\"MMMM D, YYYY\");\n        let time = `${moment(range.start).format(\"H:mm\")} - ${moment(range.end).format(\"H:mm\")}`;\n\n        if (output[day]) {\n          output[day].push(time);\n        } else {\n          output[day] = [time];\n        }\n      }\n    }\n\n    return output;\n  }\n\n  return _s(function Calendar() {\n    _s();\n\n    const classes = useStyles();\n    const today = moment();\n    const [availabilityState, setAvailabilityState] = useState(convertAvailabilityFromDatabase(availability));\n    const [quickAvailability, setQuickAvailability] = useState(makeQuickAvailability(availability));\n    const [activeDay, setActiveDay] = useState(null);\n    const [year, setYear] = useState(Number(today.format(\"YYYY\")));\n    const [monthNumber, setMonthNumber] = useState(Number(today.format(\"M\")));\n    const [settingMultiple, setSettingMultiple] = useState(false);\n    const months = useMonths(year);\n    const {\n      firstDay,\n      month,\n      lastDay\n    } = months[monthNumber];\n    let dayOfWeek = Number(moment(firstDay).format(\"d\"));\n    const days = getDaysArray();\n    const [times, setTimes] = useState(getDefaultTimes());\n    const [saving, setSaving] = useState(false);\n    let week = 0;\n    let dayOfMonth = 1;\n\n    while (week < 6 && dayOfMonth <= lastDay) {\n      days[week][dayOfWeek] = dayOfMonth;\n      dayOfMonth++;\n      dayOfWeek++;\n\n      if (dayOfWeek === 7) {\n        week++;\n        dayOfWeek = 0;\n      }\n    }\n\n    const createArrowHandler = delta => () => {\n      let newMonth = monthNumber + delta;\n\n      if (newMonth > 12) {\n        setYear(year + 1);\n        newMonth = 1;\n      } else if (newMonth < 1) {\n        setYear(year - 1);\n        newMonth = 12;\n      }\n\n      setActiveDay(null);\n      setTimes(getDefaultTimes());\n      setMonthNumber(newMonth);\n    };\n\n    const createTimeHandler = i => () => {\n      const newTimes = [...times];\n      newTimes[i].available = !newTimes[i].available;\n\n      if (activeDay) {\n        addTimeToDay(newTimes);\n      }\n\n      setTimes(newTimes);\n    };\n\n    const createDayHandler = day => () => {\n      if (settingMultiple) {\n        addTimesToDay(day);\n      } else {\n        examineAvailabilityForDay(day);\n      }\n    };\n\n    const handleSetMultiple = () => {\n      setActiveDay(null);\n      setSettingMultiple(!settingMultiple);\n    };\n\n    const handleSaveAvailability = () => {\n      const data = convertAvailabilityForDatabase(availabilityState);\n      setSaving(true);\n      setAvailability(data);\n    };\n\n    const handleJumpToCurrent = () => {\n      setYear(Number(today.format(\"YYYY\")));\n      setMonthNumber(Number(today.format(\"M\")));\n      setActiveDay(null);\n      setTimes(getDefaultTimes());\n    };\n\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [popoverContent, setPopoverContent] = useState(null);\n\n    const handleOpenPopover = date => {\n      return e => {\n        if (quickAvailability[date]) {\n          setPopoverContent(quickAvailability[date].map(time => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 51\n          }, this)));\n          setAnchorEl(e.target);\n        }\n      };\n    };\n\n    const handleClosePopover = () => {\n      setAnchorEl(null);\n      setPopoverContent(null);\n    };\n\n    return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        className: classes.calendar,\n        container: true,\n        direction: \"column\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            alignItems: \"center\",\n            justify: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                disabled: year === Number(today.format(\"YYYY\")) && month === today.format(\"MMMM\"),\n                onClick: createArrowHandler(-1),\n                children: /*#__PURE__*/_jsxDEV(ArrowLeft, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                style: {\n                  padding: 10,\n                  margin: 10\n                },\n                variant: \"outlined\",\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  direction: \"column\",\n                  alignItems: \"center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [month, \" \", year]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 487,\n                    columnNumber: 21\n                  }, this), days.map((week, i) => /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: /*#__PURE__*/_jsxDEV(Grid, {\n                      container: true,\n                      direction: \"row\",\n                      children: week.map((day, i) => /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        children: /*#__PURE__*/_jsxDEV(IconButton, {\n                          onClick: createDayHandler(day),\n                          color: activeDay === day ? \"primary\" : availabilityState[year] && availabilityState[year][month] && availabilityState[year][month][day] && availabilityState[year][month][day].filter(x => x.available).length > 0 ? \"secondary\" : \"default\",\n                          disabled: !day || year === Number(today.format(\"YYYY\")) && month === today.format(\"MMMM\") && day < Number(today.format(\"D\")),\n                          size: \"medium\",\n                          onMouseEnter: handleOpenPopover(`${month} ${day}, ${year}`),\n                          onMouseLeave: handleClosePopover,\n                          children: /*#__PURE__*/_jsxDEV(\"p\", {\n                            className: classes.calendarText,\n                            children: day\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 521,\n                            columnNumber: 33\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 495,\n                          columnNumber: 31\n                        }, this)\n                      }, year + month + i, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 494,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 492,\n                      columnNumber: 25\n                    }, this)\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 491,\n                    columnNumber: 23\n                  }, this)), /*#__PURE__*/_jsxDEV(Popover, {\n                    anchorOrigin: {\n                      vertical: \"bottom\",\n                      horizontal: \"center\"\n                    },\n                    className: classes.popover,\n                    classes: {\n                      paper: classes.paper\n                    },\n                    anchorEl: anchorEl,\n                    open: !!anchorEl,\n                    children: popoverContent\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 528,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    disabled: year === Number(today.format(\"YYYY\")) && month === today.format(\"MMMM\"),\n                    onClick: handleJumpToCurrent,\n                    className: classes.buttonNoMargin,\n                    children: \"Ir a mes actual\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 540,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: createArrowHandler(1),\n                children: /*#__PURE__*/_jsxDEV(ArrowRight, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 555,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                justify: \"center\",\n                alignItems: \"center\",\n                wrap: \"wrap\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    direction: \"column\",\n                    alignItems: \"center\",\n                    wrap: \"wrap\",\n                    children: times.map((time, i) => i < times.length - 7 && /*#__PURE__*/_jsxDEV(TimeButton, {\n                      className: classes.button,\n                      start: time.time,\n                      end: times[i + 1].time,\n                      handleClick: createTimeHandler(i),\n                      available: time.available\n                    }, time.time, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 570,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 561,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 560,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    direction: \"column\",\n                    alignItems: \"center\",\n                    wrap: \"wrap\",\n                    children: times.map((time, i) => i < times.length - 1 && i > 5 && /*#__PURE__*/_jsxDEV(TimeButton, {\n                      className: classes.button,\n                      start: time.time,\n                      end: times[i + 1].time,\n                      handleClick: createTimeHandler(i),\n                      available: time.available\n                    }, time.time, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 593,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 583,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            alignItems: \"center\",\n            justify: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                variant: \"contained\",\n                onClick: handleSetMultiple,\n                className: classes.button,\n                children: settingMultiple ? \"Done\" : \"Add Selected Times to Multiple Days\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: saving ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 625,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                variant: \"contained\",\n                onClick: handleSaveAvailability,\n                className: classes.button,\n                children: \"Save Availability\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this);\n\n    function addTimeToDay(newTimes) {\n      const newAvail = availabilityState;\n\n      if (newAvail.hasOwnProperty(year)) {\n        if (newAvail[year].hasOwnProperty(month)) {\n          newAvail[year][month][activeDay] = newTimes;\n        } else {\n          newAvail[year][month] = {\n            [activeDay]: newTimes\n          };\n        }\n      } else {\n        newAvail[year] = {\n          [month]: {\n            [activeDay]: newTimes\n          }\n        };\n      }\n\n      setAvailabilityState(newAvail);\n      setQuickAvailability(makeQuickAvailability(convertAvailabilityForDatabase(newAvail)));\n    }\n\n    function examineAvailabilityForDay(day) {\n      if (availabilityState[year] && availabilityState[year][month] && availabilityState[year][month][day]) {\n        setTimes(availabilityState[year][month][day]);\n      } else {\n        setTimes(getDefaultTimes());\n      }\n\n      setActiveDay(day);\n    }\n\n    function addTimesToDay(day) {\n      const newAvail = { ...availabilityState\n      };\n\n      if (newAvail[year]) {\n        if (newAvail[year][month]) {\n          if (newAvail[year][month][day]) {\n            newAvail[year][month][day] = combineTimeArrays(newAvail[year][month][day], times);\n          } else {\n            newAvail[year][month][day] = times;\n          }\n        } else {\n          newAvail[year][month] = {\n            [day]: times\n          };\n        }\n      } else {\n        newAvail[year] = {\n          [month]: {\n            [day]: times\n          }\n        };\n      }\n\n      setAvailabilityState(newAvail);\n      setQuickAvailability(makeQuickAvailability(convertAvailabilityForDatabase(newAvail)));\n    }\n  }, \"Q8LfBNN2d1VfKuCtStGLSByRPbM=\", false, function () {\n    return [useStyles, useMonths];\n  });\n};\n\n_c = CalendarTemplate;\nexport default CalendarTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTemplate\");","map":{"version":3,"sources":["/Users/karentovar/Documents/WebCitas/frontend/src/pages/Project/Calendar.js"],"names":["React","useState","moment","IconButton","Grid","makeStyles","Card","Button","CircularProgress","Popover","ThemeProvider","createMuiTheme","ArrowLeft","ArrowRight","CalendarTemplate","availability","setAvailability","primaryColor","secondaryColor","fontFamily","fontSize","primaryFontColor","startTime","endTime","theme","typography","palette","primary","main","secondary","text","useStyles","calendar","calendarText","margin","width","height","textAlign","button","minWidth","buttonNoMargin","popover","pointerEvents","paper","padding","spacing","useMonths","year","lastDay","month","firstDay","getDefaultTimes","times","time","available","include","filter","TimeButton","className","start","end","handleClick","getDaysArray","convertAvailabilityFromDatabase","output","range","format","Number","day","fillOutputWithDefaultTimes","i","length","convertAvailabilityForDatabase","activeDay","addActiveDayToOutput","combineTimeArrays","a","b","activeRangeStart","push","Date","hasOwnProperty","makeQuickAvailability","Calendar","classes","today","availabilityState","setAvailabilityState","quickAvailability","setQuickAvailability","setActiveDay","setYear","monthNumber","setMonthNumber","settingMultiple","setSettingMultiple","months","dayOfWeek","days","setTimes","saving","setSaving","week","dayOfMonth","createArrowHandler","delta","newMonth","createTimeHandler","newTimes","addTimeToDay","createDayHandler","addTimesToDay","examineAvailabilityForDay","handleSetMultiple","handleSaveAvailability","data","handleJumpToCurrent","anchorEl","setAnchorEl","popoverContent","setPopoverContent","handleOpenPopover","date","e","map","target","handleClosePopover","x","vertical","horizontal","newAvail"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport {\n  IconButton,\n  Grid,\n  makeStyles,\n  Card,\n  Button,\n  CircularProgress,\n  Popover,\n  ThemeProvider,\n  createMuiTheme,\n} from \"@material-ui/core\";\nimport { ArrowLeft, ArrowRight } from \"@material-ui/icons\";\n\nconst CalendarTemplate = ({\n  availability,\n  setAvailability,\n  primaryColor = \"#DF1B1B\",\n  secondaryColor = \"#47b2a2\",\n  fontFamily = \"Roboto\",\n  fontSize = 12,\n  primaryFontColor = \"#222222\",\n  startTime = \"8:00\",\n  endTime = \"20:00\",\n}) => {\n  const theme = createMuiTheme({\n    typography: {\n      fontFamily: `${fontFamily}`,\n      fontSize: fontSize,\n    },\n    palette: {\n      primary: {\n        main: primaryColor,\n      },\n      secondary: {\n        main: secondaryColor,\n      },\n      text: {\n        primary: primaryFontColor,\n      },\n    },\n  });\n\n  const useStyles = makeStyles((theme) => ({\n    calendar: {\n      fontFamily: theme.typography.fontFamily,\n    },\n    calendarText: {\n      margin: 0,\n      width: 25,\n      height: 25,\n      textAlign: \"center\",\n    },\n    button: {\n      minWidth: 200,\n      margin: 10,\n      fontFamily: theme.typography.fontFamily,\n    },\n    buttonNoMargin: {\n      minWidth: 200,\n      fontFamily: theme.typography.fontFamily,\n    },\n    popover: {\n      pointerEvents: \"none\",\n      fontFamily: theme.typography.fontFamily,\n    },\n    paper: {\n      padding: theme.spacing(1),\n    },\n  }));\n\n  const useMonths = (year) => ({\n    1: {\n      lastDay: 31,\n      month: \"January\",\n      firstDay: moment(`01/01/${year}`),\n    },\n    2: {\n      lastDay: year % 4 === 0 ? 29 : 28,\n      month: \"February\",\n      firstDay: moment(`02/01/${year}`),\n    },\n    3: {\n      lastDay: 31,\n      month: \"March\",\n      firstDay: moment(`03/01/${year}`),\n    },\n    4: {\n      lastDay: 30,\n      month: \"April\",\n      firstDay: moment(`04/01/${year}`),\n    },\n    5: {\n      lastDay: 31,\n      month: \"May\",\n      firstDay: moment(`05/01/${year}`),\n    },\n    6: {\n      lastDay: 30,\n      month: \"June\",\n      firstDay: moment(`06/01/${year}`),\n    },\n    7: {\n      lastDay: 31,\n      month: \"July\",\n      firstDay: moment(`07/01/${year}`),\n    },\n    8: {\n      lastDay: 31,\n      month: \"August\",\n      firstDay: moment(`08/01/${year}`),\n    },\n    9: {\n      lastDay: 30,\n      month: \"September\",\n      firstDay: moment(`09/01/${year}`),\n    },\n    10: {\n      lastDay: 31,\n      month: \"October\",\n      firstDay: moment(`10/01/${year}`),\n    },\n    11: {\n      lastDay: 30,\n      month: \"November\",\n      firstDay: moment(`11/01/${year}`),\n    },\n    12: {\n      lastDay: 31,\n      month: \"December\",\n      firstDay: moment(`12/01/${year}`),\n    },\n  });\n\n  const getDefaultTimes = () => {\n    const times = [\n      {\n        time: \"0:00\",\n        available: false,\n      },\n      {\n        time: \"1:00\",\n        available: false,\n      },\n      {\n        time: \"2:00\",\n        available: false,\n      },\n      {\n        time: \"3:00\",\n        available: false,\n      },\n      {\n        time: \"4:00\",\n        available: false,\n      },\n      {\n        time: \"5:00\",\n        available: false,\n      },\n      {\n        time: \"6:00\",\n        available: false,\n      },\n      {\n        time: \"7:00\",\n        available: false,\n      },\n      {\n        time: \"8:00\",\n        available: false,\n      },\n      {\n        time: \"9:00\",\n        available: false,\n      },\n      {\n        time: \"10:00\",\n        available: false,\n      },\n      {\n        time: \"11:00\",\n        available: false,\n      },\n      {\n        time: \"12:00\",\n        available: false,\n      },\n      {\n        time: \"13:00\",\n        available: false,\n      },\n      {\n        time: \"14:00\",\n        available: false,\n      },\n      {\n        time: \"15:00\",\n        available: false,\n      },\n      {\n        time: \"16:00\",\n        available: false,\n      },\n      {\n        time: \"17:00\",\n        available: false,\n      },\n      {\n        time: \"18:00\",\n        available: false,\n      },\n      {\n        time: \"19:00\",\n        available: false,\n      },\n      {\n        time: \"20:00\",\n        available: false,\n      },\n      {\n        time: \"21:00\",\n        available: false,\n      },\n      {\n        time: \"22:00\",\n        available: false,\n      },\n      {\n        time: \"23:00\",\n        available: false,\n      },\n      {\n        time: \"0:00\",\n        available: false,\n      },\n    ];\n    let include = false;\n    return times.filter(time => {\n      if (time.time === startTime) {\n        include = true;\n      }\n      if (time.time === endTime) {\n        include = false;\n        return true;\n      }\n      return include;\n    })\n  };\n\n  function TimeButton({ className, start, end, available, handleClick }) {\n    return (\n      <Button\n        onClick={handleClick}\n        color={available ? \"primary\" : \"default\"}\n        className={className}\n        variant={available ? \"contained\" : \"outlined\"}\n      >\n        {start} - {end}\n      </Button>\n    );\n  }\n\n  function getDaysArray() {\n    return [\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    ];\n  }\n\n  const convertAvailabilityFromDatabase = (availability) => {\n    const output = {};\n    for (let range of availability) {\n      let start = moment(range.start);\n      let startTime = `${start.format(\"H\")}:${start.format(\"mm\")}`;\n      let end = moment(range.end);\n      let endTime = `${end.format(\"H\")}:${end.format(\"mm\")}`;\n      let year = Number(start.format(\"YYYY\"));\n      let month = start.format(\"MMMM\");\n      let day = Number(start.format(\"D\"));\n      fillOutputWithDefaultTimes(output, year, month, day);\n      let i = 0;\n      while (\n        i < output[year][month][day].length &&\n        output[year][month][day][i].time !== startTime\n      )\n        i++;\n      while (\n        i < output[year][month][day].length &&\n        output[year][month][day][i].time !== endTime\n      ) {\n        output[year][month][day][i].available = true;\n        i++;\n      }\n    }\n    return output;\n  };\n\n  const convertAvailabilityForDatabase = (availability) => {\n    const output = [];\n    for (let year in availability) {\n      for (let month in availability[year]) {\n        for (let day in availability[year][month]) {\n          let activeDay = availability[year][month][day];\n          addActiveDayToOutput(activeDay, output, month, day, year);\n        }\n      }\n    }\n    return output;\n  };\n\n  const combineTimeArrays = (a, b) => {\n    for (let i = 0; i < a.length; i++) {\n      a[i].available = a[i].available || b[i].available;\n    }\n    return a;\n  };\n  function addActiveDayToOutput(activeDay, output, month, day, year) {\n    let activeRangeStart = null;\n    for (let time of activeDay) {\n      if (time.available && !activeRangeStart) activeRangeStart = time.time;\n      else if (!time.available && activeRangeStart) {\n        output.push({\n          start: new Date(`${month} ${day} ${year} ${activeRangeStart}`),\n          end: new Date(`${month} ${day} ${year} ${time.time}`),\n        });\n        activeRangeStart = null;\n      }\n    }\n  }\n\n  function fillOutputWithDefaultTimes(output, year, month, day) {\n    if (output.hasOwnProperty(year)) {\n      if (output[year].hasOwnProperty(month)) {\n        if (!output[year][month].hasOwnProperty(day)) {\n          output[year][month][day] = getDefaultTimes();\n        }\n      } else {\n        output[year][month] = {\n          [day]: getDefaultTimes(),\n        };\n      }\n    } else {\n      output[year] = {\n        [month]: {\n          [day]: getDefaultTimes(),\n        },\n      };\n    }\n  }\n\n  function makeQuickAvailability(availability) {\n    const output = {};\n    for (let range of availability) {\n      if (new Date(range.start) > new Date()) {\n        let day = moment(range.start).format(\"MMMM D, YYYY\");\n        let time = `${moment(range.start).format(\"H:mm\")} - ${moment(\n          range.end\n        ).format(\"H:mm\")}`;\n        if (output[day]) {\n          output[day].push(time);\n        } else {\n          output[day] = [time];\n        }\n      }\n    }\n    return output;\n  }\n  return function Calendar() {\n    const classes = useStyles();\n    const today = moment();\n    const [availabilityState, setAvailabilityState] = useState(\n      convertAvailabilityFromDatabase(availability)\n    );\n    const [quickAvailability, setQuickAvailability] = useState(\n      makeQuickAvailability(availability)\n    );\n    const [activeDay, setActiveDay] = useState(null);\n    const [year, setYear] = useState(Number(today.format(\"YYYY\")));\n    const [monthNumber, setMonthNumber] = useState(Number(today.format(\"M\")));\n    const [settingMultiple, setSettingMultiple] = useState(false);\n    const months = useMonths(year);\n    const { firstDay, month, lastDay } = months[monthNumber];\n    let dayOfWeek = Number(moment(firstDay).format(\"d\"));\n    const days = getDaysArray();\n    const [times, setTimes] = useState(getDefaultTimes());\n    const [saving, setSaving] = useState(false);\n    let week = 0;\n    let dayOfMonth = 1;\n    while (week < 6 && dayOfMonth <= lastDay) {\n      days[week][dayOfWeek] = dayOfMonth;\n      dayOfMonth++;\n      dayOfWeek++;\n      if (dayOfWeek === 7) {\n        week++;\n        dayOfWeek = 0;\n      }\n    }\n    const createArrowHandler = (delta) => () => {\n      let newMonth = monthNumber + delta;\n      if (newMonth > 12) {\n        setYear(year + 1);\n        newMonth = 1;\n      } else if (newMonth < 1) {\n        setYear(year - 1);\n        newMonth = 12;\n      }\n      setActiveDay(null);\n      setTimes(getDefaultTimes());\n      setMonthNumber(newMonth);\n    };\n    const createTimeHandler = (i) => () => {\n      const newTimes = [...times];\n      newTimes[i].available = !newTimes[i].available;\n      if (activeDay) {\n        addTimeToDay(newTimes);\n      }\n      setTimes(newTimes);\n    };\n    const createDayHandler = (day) => () => {\n      if (settingMultiple) {\n        addTimesToDay(day);\n      } else {\n        examineAvailabilityForDay(day);\n      }\n    };\n    const handleSetMultiple = () => {\n      setActiveDay(null);\n      setSettingMultiple(!settingMultiple);\n    };\n    const handleSaveAvailability = () => {\n      const data = convertAvailabilityForDatabase(availabilityState);\n      setSaving(true);\n      setAvailability(data);\n    };\n    const handleJumpToCurrent = () => {\n      setYear(Number(today.format(\"YYYY\")));\n      setMonthNumber(Number(today.format(\"M\")));\n      setActiveDay(null);\n      setTimes(getDefaultTimes());\n    };\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [popoverContent, setPopoverContent] = useState(null);\n    const handleOpenPopover = (date) => {\n      return (e) => {\n        if (quickAvailability[date]) {\n          setPopoverContent(\n            quickAvailability[date].map((time) => <p>{time}</p>)\n          );\n          setAnchorEl(e.target);\n        }\n      };\n    };\n    const handleClosePopover = () => {\n      setAnchorEl(null);\n      setPopoverContent(null);\n    };\n    return (\n      <ThemeProvider theme={theme}>\n        <Grid\n          className={classes.calendar}\n          container\n          direction=\"column\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n              <Grid item>\n                <IconButton\n                  disabled={\n                    year === Number(today.format(\"YYYY\")) &&\n                    month === today.format(\"MMMM\")\n                  }\n                  onClick={createArrowHandler(-1)}\n                >\n                  <ArrowLeft />\n                </IconButton>\n              </Grid>\n              <Grid item>\n                <Card style={{ padding: 10, margin: 10 }} variant=\"outlined\">\n                  <Grid container direction=\"column\" alignItems=\"center\">\n                    <h3>\n                      {month} {year}\n                    </h3>\n                    {days.map((week, i) => (\n                      <Grid key={i} item>\n                        <Grid container direction=\"row\">\n                          {week.map((day, i) => (\n                            <Grid key={year + month + i} item>\n                              <IconButton\n                                onClick={createDayHandler(day)}\n                                color={\n                                  activeDay === day\n                                    ? \"primary\"\n                                    : availabilityState[year] &&\n                                      availabilityState[year][month] &&\n                                      availabilityState[year][month][day] &&\n                                      availabilityState[year][month][\n                                        day\n                                      ].filter((x) => x.available).length > 0\n                                    ? \"secondary\"\n                                    : \"default\"\n                                }\n                                disabled={\n                                  !day ||\n                                  (year === Number(today.format(\"YYYY\")) &&\n                                    month === today.format(\"MMMM\") &&\n                                    day < Number(today.format(\"D\")))\n                                }\n                                size=\"medium\"\n                                onMouseEnter={handleOpenPopover(\n                                  `${month} ${day}, ${year}`\n                                )}\n                                onMouseLeave={handleClosePopover}\n                              >\n                                <p className={classes.calendarText}>{day}</p>\n                              </IconButton>\n                            </Grid>\n                          ))}\n                        </Grid>\n                      </Grid>\n                    ))}\n                    <Popover\n                      anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\",\n                      }}\n                      className={classes.popover}\n                      classes={{ paper: classes.paper }}\n                      anchorEl={anchorEl}\n                      open={!!anchorEl}\n                    >\n                      {popoverContent}\n                    </Popover>\n                    <Button\n                      disabled={\n                        year === Number(today.format(\"YYYY\")) &&\n                        month === today.format(\"MMMM\")\n                      }\n                      onClick={handleJumpToCurrent}\n                      className={classes.buttonNoMargin}\n                    >\n                      Ir a mes actual\n                    </Button>\n                  </Grid>\n                </Card>\n              </Grid>\n              <Grid item>\n                <IconButton onClick={createArrowHandler(1)}>\n                  <ArrowRight />\n                </IconButton>\n              </Grid>\n              <Grid item>\n                <Grid container justify=\"center\" alignItems=\"center\" wrap=\"wrap\">\n                  <Grid item>\n                    <Grid\n                      container\n                      direction=\"column\"\n                      alignItems=\"center\"\n                      wrap=\"wrap\"\n                    >\n                      {times.map(\n                        (time, i) =>\n                          i < times.length - 7 && (\n                            <TimeButton\n                              key={time.time}\n                              className={classes.button}\n                              start={time.time}\n                              end={times[i + 1].time}\n                              handleClick={createTimeHandler(i)}\n                              available={time.available}\n                            />\n                          )\n                      )}\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <Grid\n                      container\n                      direction=\"column\"\n                      alignItems=\"center\"\n                      wrap=\"wrap\"\n                    >\n                      {times.map(\n                        (time, i) =>\n                          i < times.length - 1 &&\n                          i > 5 && (\n                            <TimeButton\n                              key={time.time}\n                              className={classes.button}\n                              start={time.time}\n                              end={times[i + 1].time}\n                              handleClick={createTimeHandler(i)}\n                              available={time.available}\n                            />\n                          )\n                      )}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n              <Grid item>\n                <Button\n                  color=\"primary\"\n                  variant=\"contained\"\n                  onClick={handleSetMultiple}\n                  className={classes.button}\n                >\n                  {settingMultiple\n                    ? \"Done\"\n                    : \"Add Selected Times to Multiple Days\"}\n                </Button>\n              </Grid>\n              <Grid item>\n                {saving ? (\n                  <CircularProgress />\n                ) : (\n                  <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={handleSaveAvailability}\n                    className={classes.button}\n                  >\n                    Save Availability\n                  </Button>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </ThemeProvider>\n    );\n\n    function addTimeToDay(newTimes) {\n      const newAvail = availabilityState;\n      if (newAvail.hasOwnProperty(year)) {\n        if (newAvail[year].hasOwnProperty(month)) {\n          newAvail[year][month][activeDay] = newTimes;\n        } else {\n          newAvail[year][month] = {\n            [activeDay]: newTimes,\n          };\n        }\n      } else {\n        newAvail[year] = {\n          [month]: {\n            [activeDay]: newTimes,\n          },\n        };\n      }\n      setAvailabilityState(newAvail);\n      setQuickAvailability(\n        makeQuickAvailability(convertAvailabilityForDatabase(newAvail))\n      );\n    }\n\n    function examineAvailabilityForDay(day) {\n      if (\n        availabilityState[year] &&\n        availabilityState[year][month] &&\n        availabilityState[year][month][day]\n      ) {\n        setTimes(availabilityState[year][month][day]);\n      } else {\n        setTimes(getDefaultTimes());\n      }\n      setActiveDay(day);\n    }\n\n    function addTimesToDay(day) {\n      const newAvail = { ...availabilityState };\n      if (newAvail[year]) {\n        if (newAvail[year][month]) {\n          if (newAvail[year][month][day]) {\n            newAvail[year][month][day] = combineTimeArrays(\n              newAvail[year][month][day],\n              times\n            );\n          } else {\n            newAvail[year][month][day] = times;\n          }\n        } else {\n          newAvail[year][month] = {\n            [day]: times,\n          };\n        }\n      } else {\n        newAvail[year] = {\n          [month]: {\n            [day]: times,\n          },\n        };\n      }\n      setAvailabilityState(newAvail);\n      setQuickAvailability(\n        makeQuickAvailability(convertAvailabilityForDatabase(newAvail))\n      );\n    }\n  };\n};\n\nexport default CalendarTemplate;\n"]},"metadata":{},"sourceType":"module"}