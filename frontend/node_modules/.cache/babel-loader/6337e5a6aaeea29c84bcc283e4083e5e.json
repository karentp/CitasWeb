{"ast":null,"code":"var _jsxFileName = \"/Users/karentovar/Documents/WebCitas/WebCitas/frontend/src/pages/Graphics/ShowHistogram.js\";\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShowHistogram(props) {\n  const {\n    data\n  } = props;\n  const options = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        beginAtZero: true\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: function () {},\n          label: function (context) {\n            let index = context.dataIndex;\n            let dataset = context.dataset.data;\n            let interval = \"Intervalo: [\";\n            interval += context.parsed.x + \", \";\n            interval += index < dataset.length - 1 ? dataset[index + 1].x : \" \";\n            interval += \"[\";\n            let frequence = \"Frecuencia: \" + context.parsed.y;\n            return [interval, frequence];\n          }\n        }\n      }\n    }\n  };\n  let configs = [];\n\n  for (let key in data) {\n    let dataVariable = Array.from(data[key]);\n    dataVariable.sort(function (a, b) {\n      return a - b;\n    });\n    let classes = Math.ceil(Math.sqrt(dataVariable.length));\n    let amplitude = 0;\n    let range = 0;\n    let parseData = [];\n\n    if (classes > 0) {\n      range = dataVariable.at(-1) - dataVariable.at(0);\n      amplitude = Math.round(range / classes);\n      let interval = Math.floor(dataVariable.at(0));\n      let index = 0;\n\n      while (index < dataVariable.length) {\n        let frequence = 0;\n        let previous = interval;\n        interval += amplitude;\n\n        while (dataVariable[index] < interval) {\n          frequence++;\n          index++;\n        }\n\n        parseData.push({\n          x: previous,\n          y: frequence\n        });\n      }\n    }\n\n    const config = {\n      datasets: [{\n        label: key,\n        data: parseData,\n        backgroundColor: '#8ecae6',\n        borderColor: '#219ebc',\n        borderWidth: 1,\n        categoryPercentage: 1,\n        barPercentage: 1\n      }]\n    };\n    configs.push(config);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: configs.map((config, index) => /*#__PURE__*/_jsxDEV(Bar, {\n      data: config,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_c = ShowHistogram;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowHistogram\");","map":{"version":3,"sources":["/Users/karentovar/Documents/WebCitas/WebCitas/frontend/src/pages/Graphics/ShowHistogram.js"],"names":["React","Bar","ShowHistogram","props","data","options","scales","x","type","y","beginAtZero","plugins","tooltip","callbacks","title","label","context","index","dataIndex","dataset","interval","parsed","length","frequence","configs","key","dataVariable","Array","from","sort","a","b","classes","Math","ceil","sqrt","amplitude","range","parseData","at","round","floor","previous","push","config","datasets","backgroundColor","borderColor","borderWidth","categoryPercentage","barPercentage","map"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nexport default function ShowHistogram(props) {\r\n    const { data } = props;\r\n\r\n    const options = {\r\n        scales: {\r\n            x: {\r\n                type: 'linear',\r\n            },\r\n            y: {\r\n                beginAtZero: true\r\n            }\r\n        },\r\n        plugins: {\r\n            tooltip: {\r\n                callbacks: {\r\n                    title: function () { },\r\n                    label: function (context) {\r\n                        let index = context.dataIndex;\r\n                        let dataset = context.dataset.data;\r\n                        let interval = \"Intervalo: [\";\r\n                        interval += context.parsed.x + \", \";\r\n                        interval += index < dataset.length - 1 ? dataset[index + 1].x : \" \";\r\n                        interval += \"[\";\r\n                        let frequence = \"Frecuencia: \" + context.parsed.y;\r\n                        return [interval, frequence];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    let configs = [];\r\n\r\n    for (let key in data) {\r\n        let dataVariable = Array.from(data[key]);\r\n        dataVariable.sort(function (a, b) { return a - b });\r\n\r\n        let classes = Math.ceil(Math.sqrt(dataVariable.length));\r\n        let amplitude = 0;\r\n        let range = 0;\r\n\r\n        let parseData = [];\r\n        if (classes > 0) {\r\n            range = dataVariable.at(-1) - dataVariable.at(0);\r\n            amplitude = Math.round(range / classes);\r\n            let interval = Math.floor(dataVariable.at(0));\r\n            let index = 0;\r\n            while (index < dataVariable.length) {\r\n                let frequence = 0;\r\n                let previous = interval;\r\n                interval += amplitude\r\n                while (dataVariable[index] < interval) {\r\n                    frequence++;\r\n                    index++;\r\n                }\r\n                parseData.push({ x: previous, y: frequence });\r\n            }\r\n        }\r\n\r\n        const config = {\r\n            datasets: [{\r\n                label: key,\r\n                data: parseData,\r\n                backgroundColor: '#8ecae6',\r\n                borderColor: '#219ebc',\r\n                borderWidth: 1,\r\n                categoryPercentage: 1,\r\n                barPercentage: 1\r\n            }]\r\n        };\r\n        configs.push(config);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {configs.map((config, index) => (\r\n                <Bar data={config} options={options} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}